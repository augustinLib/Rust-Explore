// Rust에서는 main 함수의 위치를 융통성 있게 둘 수 있음
fn main() {
    // 변수 선언 시 let 키워드를 사용
    // Rust에서의 변수는 기본적으로 immutable (변경 불가능)
    // 이 경우 데이터 타입을 컴파일러가 추론
    let a = 10;

    // 변수 선언 시 데이터 타입을 명시적으로 지정할 수 있음
    let b: i32 = 20;

    // 숫자 데이터 타입의 경우, 해당 리터럴 형식에 타입 에너테이션을 붙일 수 있음 (30i32, 30_i32)
    let c = 30i32;

    // 숫자 리터럴 내에서는 _를 사용할 수 있으며, 가독성 향상 이외에 다른 의미는 없음
    let d = 30_i32;
    let e = add(add(a, b), add(c, d));

    // Rust에서의 문자열은 무조건 큰따옴표를 사용하고, 단일 문자에 대해 작은따옴표를 사용 (C, C++과 유사)
    // C++에서의 %s, %d 등의 포맷팅은 Rust에서는 {}를 사용
    println!("( a + b ) + ( c + d ) = {}", e);
}

// 함수 정의 시 타입 선언이 필수 (Go와 유사)
fn add(i: i32, j: i32) -> i32 {
    // 반환 값은 return 키워드를 사용하지 않고 마지막 표현식의 결과로 반환
    // 이 경우 ;를 붙이지 않아야 함
    i + j
}
